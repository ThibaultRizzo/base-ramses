from typing import List
from models.base_model import BaseModel
from sqlalchemy import Column, String, Enum, TIMESTAMP, Date, Float, ForeignKey, Integer, Boolean
from utils.enums import BaseEnum
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID


class ModelClass(BaseEnum):
    BAND_MODEL = "BAND_MODEL"

class ModelFrequency(BaseEnum):
    HOURLY = "HOURLY"
    DAILY = "DAILY"
    WEEKLY = "WEEKLY"

class OrderPosition(BaseEnum):
    BUY = "BUY"
    SELL = "SELL"

class TradingModelOrder(BaseModel):
    """
    Model representing a trading model order
    """
    position = Column(Enum(OrderPosition, native_enum=False), nullable=False)
    expected_quantity= Column(Integer(), nullable=False) # Quantity generated by model
    sent_quantity= Column(Integer(), nullable=True) # Quantity actually sent to broker
    execution_quantity= Column(Integer(), nullable=True) # Quantity actually executed by broker
    expected_price= Column(Float(), nullable=False) # Quantity generated by model
    execution_price= Column(Float(), nullable=True) # Quantity actually executed by broker

    instrument_id = Column(UUID(as_uuid=True), ForeignKey("instrument.id"), nullable=False)
    portfolio_line_id = Column(UUID(as_uuid=True), ForeignKey("portfolio_line.id"), nullable=False)
    model_id = Column(UUID(as_uuid=True), ForeignKey("trading_model.id", ondelete="CASCADE"), nullable=False)

    instrument = relationship("Instrument", passive_deletes=True)
    portfolio = relationship("Portfolio", passive_deletes=True)
    model = relationship("Instrument", passive_deletes=True)
  

class TradingModelParameter(BaseModel):
    """
    Model representing a trading model parameter
    """
    start_date = Column(Date(), nullable=False)
    end_date = Column(Date(), nullable=False)
    value= Column(Float(), nullable=False)
    instrument_id = Column(UUID(as_uuid=True), ForeignKey("instrument.id"), nullable=False)
    model_id = Column(UUID(as_uuid=True), ForeignKey("trading_model.id", ondelete="CASCADE"), nullable=False)

    instrument = relationship("Instrument", passive_deletes=True)
    model = relationship("Instrument", passive_deletes=True)


class TradingModel(BaseModel):
    """
    Model representing a trading model
    """
    name = Column(String, unique=True, nullable=False)
    description = Column(String, nullable=True)
    model_cls = Column(Enum(ModelClass, native_enum=False), nullable=False)
    frequency = Column(Enum(ModelFrequency, native_enum=False), nullable=False)
    is_in_production = Column(Boolean, unique=True, nullable=False)

    portfolio_line_id = Column(UUID(as_uuid=True), ForeignKey("portfolio_line.id"), nullable=False)
    portfolio = relationship("Portfolio", passive_deletes=True)


    def execute(self) -> List[TradingModelOrder]:
        pass
        # model_cls.execute()
