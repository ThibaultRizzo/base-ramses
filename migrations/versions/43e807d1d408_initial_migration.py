"""initial_migration

Revision ID: 43e807d1d408
Revises: 
Create Date: 2023-11-04 15:16:41.246573

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "43e807d1d408"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "broker",
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("api_key", sa.String(), nullable=False),
        sa.Column("equity_fees", sa.Float(), nullable=False),
        sa.Column("equity_margin_req", sa.Float(), nullable=False),
        sa.Column("indice_fees", sa.Float(), nullable=False),
        sa.Column("indice_margin_req", sa.Float(), nullable=False),
        sa.Column("forex_fees", sa.Float(), nullable=False),
        sa.Column("forex_margin_req", sa.Float(), nullable=False),
        sa.Column("commodity_fees", sa.Float(), nullable=False),
        sa.Column("commodity_margin_req", sa.Float(), nullable=False),
        sa.Column("irate_fees", sa.Float(), nullable=False),
        sa.Column("irate_margin_req", sa.Float(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("api_key"),
    )
    op.create_index(op.f("ix_broker_username"), "broker", ["username"], unique=True)
    op.create_table(
        "instrument",
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("yfinance_code", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column(
            "country_code", sa.Enum("SWEDEN", "US", "EMU", name="countrycode", native_enum=False), nullable=False
        ),
        sa.Column(
            "type",
            sa.Enum("EQUITY", "INDICE", "FOREX", "COMMO", "IRATE", name="instrumenttype", native_enum=False),
            nullable=False,
        ),
        sa.Column("earning_publication_date", sa.TIMESTAMP(), nullable=False),
        sa.Column(
            "data_extraction_class", sa.Enum("YFINANCE", name="dataextractionclass", native_enum=False), nullable=False
        ),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("yfinance_code"),
    )
    op.create_index(op.f("ix_instrument_code"), "instrument", ["code"], unique=True)
    op.create_index(op.f("ix_instrument_description"), "instrument", ["description"], unique=True)
    op.create_table(
        "user",
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("first_name"),
        sa.UniqueConstraint("last_name"),
    )
    op.create_index(op.f("ix_user_username"), "user", ["username"], unique=True)
    op.create_table(
        "daily_features_timeseries",
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("sector_pe", sa.Float(), nullable=False),
        sa.Column("pe", sa.Float(), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(["instrument_id"], ["instrument.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "hourly_price_timeseries",
        sa.Column("date", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("open", sa.Float(), nullable=False),
        sa.Column("high", sa.Float(), nullable=False),
        sa.Column("low", sa.Float(), nullable=False),
        sa.Column("close", sa.Float(), nullable=False),
        sa.Column("volume", sa.Float(), nullable=False),
        sa.Column("frequency", sa.Enum("HOURLY", "DAILY", name="pricefrequency", native_enum=False), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instrument.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("unique_ticker_date", "hourly_price_timeseries", ["date", "instrument_id"], unique=True)
    op.create_table(
        "portfolio",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("net_asset_value", sa.Float(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "portfolio_line",
        sa.Column("portfolio_id", sa.UUID(), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("broker_id", sa.UUID(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["broker_id"],
            ["broker.id"],
        ),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instrument.id"],
        ),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolio.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "trading_model",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column(
            "model_cls", sa.Enum("BAND_MODEL", "RAMSES_MODEL", name="modelclass", native_enum=False), nullable=False
        ),
        sa.Column(
            "frequency", sa.Enum("HOURLY", "DAILY", "WEEKLY", name="modelfrequency", native_enum=False), nullable=False
        ),
        sa.Column("is_in_production", sa.Boolean(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("portfolio_id", sa.UUID(), nullable=True),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["portfolio_id"],
            ["portfolio.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "trading_model_instrument",
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("parameter", sa.Float(), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instrument.id"],
        ),
        sa.ForeignKeyConstraint(["model_id"], ["trading_model.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "trading_model_order",
        sa.Column("position", sa.Enum("BUY", "SELL", name="orderposition", native_enum=False), nullable=False),
        sa.Column("expected_quantity", sa.Integer(), nullable=False),
        sa.Column("sent_quantity", sa.Integer(), nullable=True),
        sa.Column("execution_quantity", sa.Integer(), nullable=True),
        sa.Column("expected_price", sa.Float(), nullable=False),
        sa.Column("execution_price", sa.Float(), nullable=True),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("portfolio_line_id", sa.UUID(), nullable=False),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instrument.id"],
        ),
        sa.ForeignKeyConstraint(["model_id"], ["trading_model.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["portfolio_line_id"],
            ["portfolio_line.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "trading_model_parameter",
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("instrument_id", sa.UUID(), nullable=False),
        sa.Column("model_id", sa.UUID(), nullable=False),
        sa.Column("id", sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(
            ["instrument_id"],
            ["instrument.id"],
        ),
        sa.ForeignKeyConstraint(["model_id"], ["trading_model.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("trading_model_parameter")
    op.drop_table("trading_model_order")
    op.drop_table("trading_model_instrument")
    op.drop_table("trading_model")
    op.drop_table("portfolio_line")
    op.drop_table("portfolio")
    op.drop_index("unique_ticker_date", table_name="hourly_price_timeseries")
    op.drop_table("hourly_price_timeseries")
    op.drop_table("daily_features_timeseries")
    op.drop_index(op.f("ix_user_username"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_instrument_description"), table_name="instrument")
    op.drop_index(op.f("ix_instrument_code"), table_name="instrument")
    op.drop_table("instrument")
    op.drop_index(op.f("ix_broker_username"), table_name="broker")
    op.drop_table("broker")
    # ### end Alembic commands ###
